#include <iostream>
#include <algorithm>
#include <string>
#include <vector>

using namespace std;

/*
sort 함수의 인자로 전달되는 Compare 함수는, 정렬하고자 하는 자료형을 두 개 받은 후 정렬이 일어나는 방향으로 true를 반환해야 합니다.
예를 들어 int형 데이터를 오름차순으로 정렬하고 싶다면, int형 데이터를 두 개 받은 후 두 번째 인자가 더 크면 true,
더 작으면 false를 반환해야 한다는 것입니다. (여기서 같은 경우는 true나 false 무엇을 반환해도 상관없습니다.)

*/
bool comp(const string &str1, const string &str2) {
	if(str1.size() == str2.size())
		return str1 < str2;

	return str1.size() < str2.size();
}

int main(void)
{
	int N;
	vector<string> strBuff;
	string str;
	std::cin >> N;
	
	for(int i = 0; i < N; i ++) {
		cin >> str;
		strBuff.push_back(str);
	}

	vector<string>::iterator iter;
	vector<string>::iterator end_iter;
	
	sort(strBuff.begin(), strBuff.end(), comp);
	end_iter = unique(strBuff.begin(), strBuff.end());

	for(iter = strBuff.begin(); iter < end_iter; iter ++) {
		cout << *iter << endl;
	}
	

	
}

/*
// 시간초과 코드...
#include <iostream>
#include <string>
using namespace std;
int main(void)
{
	int N;
	string *strBuff;
	vector<string>
	
	std::cin >> N;
	strBuff = new string[N + 1];

	for(int i = 0; i < N; i ++) {
		std::cin >> strBuff[i];
	}
	
	for(int i = 0; i < N; i ++) {
		cout << strBuff[i] << endl;
	}
	cout << '\n' << endl;

	for(int i = 0; i < N; i ++) {
		for(int j = 0; j < N - 1; j ++) {
			bool changeFlag = false;

			if(strBuff[j].length() > strBuff[j + 1].length()) { // 길이가 더 길때
				changeFlag = true;
			} else if(strBuff[j].length() == strBuff[j + 1].length()) {
				int wordLength = strBuff[j].length();
				for(int k = 0; k < wordLength; k ++) {
					if(strBuff[j][k] > strBuff[j + 1][k]) {
						changeFlag = true;
						break;
					}
				}
			}

			if(changeFlag) {
				string tempWord;
				tempWord = strBuff[j];
				strBuff[j] = strBuff[j + 1];
				strBuff[j + 1] = tempWord;
			}
		}
	}
	
	for(int i = 0; i < N; i ++) {
		if(i != 0 && strBuff[i].compare(strBuff[i - 1]) == 0) continue;
		cout << strBuff[i] << endl;
	}
	
	// 안꺼지기
	int a;
	std::cin >> a;
	delete strBuff;
}
*/